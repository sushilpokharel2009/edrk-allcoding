http://jasmine.github.io/edge/introduction.html

JASMINE UNIT TEST MATCHERS

expect(true).toBe(true);
expect(a).toBe(b);    
expect(a).not.toBe(null);

expect(a).toEqual(12);
expect(foo).toEqual(bar);

expect(message).toMatch(/bar/);
expect(message).toMatch("bar");
expect(message).not.toMatch(/quux/);

expect(a.foo).toBeDefined();
expect(a.bar).not.toBeDefined();

expect(a.foo).not.toBeUndefined();
expect(a.bar).toBeUndefined();

expect(null).toBeNull();
expect(a).toBeNull();
expect(foo).not.toBeNull();

expect(foo).toBeTruthy();
expect(a).not.toBeTruthy();

expect(a).toBeFalsy();
expect(foo).not.toBeFalsy();

expect(a).toContain("bar");
expect(a).not.toContain("quux");

expect(e).toBeLessThan(pi);
expect(pi).not.toBeLessThan(e);

expect(pi).toBeGreaterThan(e);
expect(e).not.toBeGreaterThan(pi);

expect(pi).not.toBeCloseTo(e, 2);
expect(pi).toBeCloseTo(e, 0);

expect(foo).not.toThrow();
expect(bar).toThrow();

expect(foo).toThrowError("foo bar baz");
expect(foo).toThrowError(/bar/);
expect(foo).toThrowError(TypeError);
expect(foo).toThrowError(TypeError, "foo bar baz");

fail("Callback has been called");/*Manual Failing*/
this.variable = '';/* sharing variable across beforeEach,afterEach,it*/
xdescribe;/*Disable Whole Suite*/
xit;/*Disable Test Spec*/
fdescribe; /*Will be the only one running*/
fit;/*Will be the only one running*/
pending('this is why it is pending');/*Any test with xit or it without fn will be marked pending*/

spyOn(foo, 'setBar');/*Spies on a object. Can use toHaveBeenCalled and toHaveBeenCalledWith*/
expect(foo.setBar).toHaveBeenCalled();
expect(foo.setBar).toHaveBeenCalledWith(123);

spyOn(foo, 'getBar').and.callThrough();/*spyOn + in addition it will delegate to the actual implementation*/

spyOn(foo, "getBar").and.returnValue(745);/*spyOn + all calls to the function will return a specific value*/

spyOn(foo, "getBar").and.returnValues("fetched first", "fetched second");/*return specific values in order until last then undefined for all subsequent calls*/

spyOn(foo, "getBar").and.callFake(function() {return 1001;});/*all calls to the spy will delegate to the supplied function*/

spyOn(foo, "setBar").and.throwError("quux");

beforeEach - spyOn(foo, 'setBar'); 
it - expect(foo.setBar.calls.any()).toEqual(false);
it - expect(foo.setBar.calls.count()).toEqual(0);
it - expect(foo.setBar.calls.argsFor(0)).toEqual([123]);
it - expect(foo.setBar.calls.allArgs()).toEqual([[123],[456, "baz"]]);
it - expect(foo.setBar.calls.all()).toEqual([{object: foo, args: [123], returnValue: undefined}]);
it - expect(foo.setBar.calls.mostRecent()).toEqual({object: foo, args: [456, "baz"], returnValue: undefined});
it - expect(foo.setBar.calls.first()).toEqual({object: foo, args: [123], returnValue: undefined});
foo.setBar.calls.reset();/*Clears all spies*/

foo(12, function(){return false;});expect(foo).toHaveBeenCalledWith(jasmine.any(Number), jasmine.any(Function));/*true if the constructor matches the constructor of the actual value. jasmine.anything returns true if the actual value is not null or undefined*/

expect(foo).not.toEqual(jasmine.objectContaining({c: 37}));/*Partial Object Matching*/
expect(callback).not.toHaveBeenCalledWith(jasmine.arrayContaining([5, 2]));/*Partial Array Matching*/

expect(callback).not.toHaveBeenCalledWith(jasmine.stringMatching(/^bar$/));/*String Matching*/

before - jasmine.clock().install(); after - jasmine.clock().uninstall(); /*Time dependant code*/
jasmine.clock().tick(101); /*Tick the time*/
jasmine.clock().mockDate(baseTime);/*Mock the Date*/

done();done.fail("Second callback has been called");/*Async support*/
